stages:
#    - analysis
    - build
    - tests
    - deploy

#sonarqube analysis:
#  stage: analysis
#  script:
#  - docker run -v ${PWD}/:/code/ --rm -e SONAR_URL=$SONAR_URL -e SONAR_ANALYSIS_MODE='preview' -e SONAR_GITLAB_URL='https://gitlab.softbox.com.br' -e SONAR_GITLAB_USER_TOKEN=$SONAR_USER_TOKEN -e SONAR_GITLAB_COMMIT_SHA=$CI_COMMIT_SHA -e SONAR_GITLAB_REF_NAME=$CI_COMMIT_REF_NAME -e SONAR_GITLAB_PROJECT_ID=$CI_PROJECT_ID -e SONAR_LOGIN=$SONAR_USER ciricihq/gitlab-sonar-scanner /bin/sh -c "cp /code/sonar-project.properties . && gitlab-sonar-scanner -X" 
#  only:
#    - develop
#
#sonarqube publish:
#  stage: analysis
#  script:
#  - docker run -v ${PWD}/:/code/ --rm -e SONAR_URL='https://sonarg.softbox.com.br' -e SONAR_ANALYSIS_MODE='publish' -e SONAR_LOGIN=$SONAR_LOGIN -e SONAR_GITLAB_COMMIT_SHA=$CI_COMMIT_SHA -e SONAR_GITLAB_REF_NAME=$CI_COMMIT_REF_NAME -e SONAR_GITLAB_PROJECT_ID=$CI_PROJECT_ID ciricihq/gitlab-sonar-scanner /bin/sh -c "cp /code/sonar-project.properties . && gitlab-sonar-scanner -X" 
#  only:
#    - develop

build:
    stage: build
    script:
    - echo "starting build in hml"
    - docker build --tag $DOCKER_REGISTRY/backend_eldoc_analytics_hlg:latest -f ci/backend_eldoc_analytics.Dockerfile --build-arg VERSION_ENV=$HML_VERSION_ENV --build-arg ENVIRONMENT_ENV=$HML_ENVIRONMENT_ENV --build-arg SECRETKEYCRIPT_ENV=$HML_SECRETKEYCRIPT_ENV --build-arg SERVER_HOST_ENV=$HML_SERVER_HOST_ENV --build-arg SERVER_PORT_ENV=$HML_SERVER_PORT_ENV --build-arg FRONT_HOST_ENV=$HML_FRONT_HOST_ENV --build-arg FRONT_PORT_ENV=$HML_FRONT_PORT_ENV --build-arg DATABASE_HOST_ENV=$HML_DATABASE_HOST_ENV --build-arg DATABASE_DBNAME_ENV=$HML_DATABASE_DBNAME_ENV --build-arg DATABASE_USR_ENV=$HML_DATABASE_USR_ENV --build-arg DATABASE_PSW_ENV=$HML_DATABASE_PSW_ENV --build-arg BACK_PROTOCOLO_ENV=$HML_BACK_PROTOCOLO_ENV --build-arg BACK_PORT_ENV=$HML_BACK_PORT_ENV --build-arg BACK_HOST_ENV=$HML_BACK_HOST_ENV .
    - echo "build hml done!"
    only:
    - /^release.*$/

tests:
    stage: tests
    script:
    - echo "running unit tests ..."
    - docker run --rm $DOCKER_REGISTRY/backend_eldoc_analytics_hlg npm run unit-test
    - echo "copying frontend html to apache container ..."
    - docker create --name eldoc-analytics $DOCKER_REGISTRY/backend_eldoc_analytics_hlg:latest
    - docker cp eldoc-analytics:/home/appuser/eldoc-analytics/frontend/dist/ html/
    - docker rm eldoc-analytics
    - docker build --tag $DOCKER_REGISTRY/frontend_eldoc_analytics_hlg:latest -f ci/frontend_eldoc_analytics.Dockerfile .
    - echo "pushing image to registry ..."
    - docker push $DOCKER_REGISTRY/backend_eldoc_analytics_hlg:latest
    - docker push $DOCKER_REGISTRY/frontend_eldoc_analytics_hlg:latest
    - echo "image pushed successfully!"
    only:
    - /^release.*$/

deploy_container:
    stage: deploy
    script:
    - rancherapi.py upgrade $RANCHER_SERVICE_ID --start_first --complete_previous --auto_complete
    - rancherapi.py upgrade $RANCHER_SERVICE_ID --start_first --complete_previous --auto_complete
    environment:
      name: hml
      url: http://$HML_ERP_URL/
    when: manual
    only:
    - /^release.*$/

